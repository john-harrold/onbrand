[{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Templated Workflows","text":"officer package used generate underlying PowerPoint Word documents. purpose onbrand provide abstraction layer (mapping) functions officer order allow reporting workflow used different template documents. involves providing consistent customizable method interact templates well form markdown control formatting text. want use Office templates, recommend see Custom Office Templates Vignette. vignette focuses construct workflows using templates. use internal templates embedded onbrand. want copy locally can use following commands:","code":"file.copy(system.file(package=\"onbrand\", \"templates\", \"report.pptx\"), \"report.pptx\") file.copy(system.file(package=\"onbrand\", \"templates\", \"report.docx\"), \"report.docx\") file.copy(system.file(package=\"onbrand\", \"templates\", \"report.yaml\"), \"report.yaml\")"},{"path":[]},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"loading-your-presentation-template","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Loading your presentation template","title":"Templated Workflows","text":"create new onbrand object PowerPoint document need use onbrand::read_template(). requires supply path PowerPoint document yaml mapping files follows:","code":"obnd = read_template(        template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),        mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"adding-content-to-placeholders","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Adding content to placeholders","title":"Templated Workflows","text":"mapping file (printed bottom document) uses descriptive names slide masters placeholders. snippet report yaml. add content, use onbrand::report_add_slide(). following add slide using templated title_slide layout. Provide elements argument list placeholder names - containing list values content type. placeholder name listed need specify content type content list: detailed description different types content expected format see help onbrand::add_pptx_ph_content() function. Briefly, can specify following content types: \"text\" - string text (possible type mapping file text) \"list\" - list information (possible type mapping file list) \"imagefile\" - string containing path image file \"ggplot\" - ggplot object \"table\" - list containing table content options \"flextable\" - list containing flextable content options \"flextable_object\" - user-defined flextable object","code":"rpptx:   master: Office Theme   templates:     title_slide:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Subtitle 2         content_type: text obnd = report_add_slide(obnd,   template = \"title_slide\",   elements = list(      title     = list( content = \"Onbrand PowerPoint Example\",                        type    = \"text\"),      sub_title = list( content = \"Workflow Abstraction\",                        type    = \"text\")))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"lists","dir":"Articles","previous_headings":"Introduction > PowerPoint > Adding content to placeholders","what":"Lists","title":"Templated Workflows","text":"previous example showed add text content. add list, define vector paired content format c(\"indent level\", \"content\", \"indent level\", \"content). indent level indicates numeric value starting 1. example, define following list content: list bl can added content value placeholder list type mapping file:","code":"bl = c(\"1\", \"This is first level bullet\",        \"2\", \"sub-bullet\",        \"3\", \"sub-sub-bullet\",        \"3\", \"can't have just one sub-sub-bullet\",        \"2\", \"same goes for sub-bullets\",        \"1\", \"Another first level bullet\") obnd = report_add_slide(obnd,   template = \"content_list\",   elements = list(      title        = list( content = \"Adding List Content\",                           type    = \"text\"),      content_body = list( content = bl,                           type    = \"list\")))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"figures","dir":"Articles","previous_headings":"Introduction > PowerPoint > Adding content to placeholders","what":"Figures","title":"Templated Workflows","text":"Figures can added two ways: image file (e.g.Â png) ggplot object (preferred method) Generally, ggplot object preferred automatically size according dimensions placeholder. First lets create images: Now object p contains ggplot object imgfile points png file containing image, can add content two_content_header_text slide template:","code":"library(ggplot2) p = ggplot() + annotate(\"text\", x=0, y=0, label = \"picture example\") imgfile = tempfile(pattern=\"image\", fileext=\".png\") ggsave(filename=imgfile, plot=p, height=5.15, width=9, units=\"in\") obnd = report_add_slide(obnd,   template = \"two_content_header_text\",   elements = list(      title                = list(content  = \"Adding Images Content\",                                  type     = \"text\"),      content_left_header  = list(content  =\"ggplot object\",                                  type     = \"text\"),      content_left         = list(content  = p,                                  type     = \"ggplot\"),      content_right_header = list(content  =\"image file\",                                  type     = \"text\"),      content_right        = list(content  = imgfile,                                  type     = \"imagefile\")))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"tables","dir":"Articles","previous_headings":"Introduction > PowerPoint > Adding content to placeholders","what":"Tables","title":"Templated Workflows","text":"Tables can supplied three different ways, providing increasing level control output: table - Expects list tabular data attributes. uses underlying tables PowerPoint make tables. flextable - Expects list similar table , instead using PowerPoint tables, table created using flextable package. flextable_object - allows create flextable use directly. ultimate level control. Lets start creating simple data frame: create PowerPoint table, use table content type. Construct named list single element, table, containing data frame; tab_cont = list(table = tdf). can add list elements display header information well. See help onbrand::add_pptx_ph_content() details. Sometimes may want little control tabular output. flextable type allows supply data information flextable created onbrand use create flextable . specifying want header format table rendered markdown \"md\" specifying top header (can top, middle bottom) overwritten (formatting markdown see markdown section ). Next specify details like column width. reference help onbrand::add_pptx_ph_content(). covers details list elements can supplied. Alternatively, can create flextable object directly using flextable package. enormous amount flexibility flextable package. can seen Word examples , see documentation package get feel possible. can add (flextable list: tab_ft, flextable object: tab_fto) placeholders slide:","code":"tdf = data.frame(Parameters = c(\"Length\", \"Width\", \"Height\"),                  Values     = 1:3,                  Units      = c(\"m\", \"m\", \"m\") ) tab_cont = list(table = tdf) obnd = report_add_slide(obnd,   template = \"content_text\",    elements = list(      title         = list( content      = \"Tables\",                            type         = \"text\"),      sub_title     = list( content      = \"Creating PowerPoint Table\",                            type         = \"text\"),      content_body  = list( content      = tab_cont,                            type         = \"table\"))) tab_ft = list(table         = tdf,               header_format = \"md\",               header_top    = list(Parameters = \"Name^2^\",                                    Values     = \"*Value*\",                                    Units      = \"**Units**\"),               cwidth        = 0.8,               table_autofit = TRUE,               table_theme   = \"theme_zebra\") tab_fto = flextable(tdf) obnd = report_add_slide(obnd,   template = \"two_content_header_text\",   elements = list(      title                 = list( content      = \"Tables\",                                    type         = \"text\"),      sub_title             = list( content      = \"flextables can be created in two ways\",                                    type         = \"text\"),      content_left_header   = list( content      = 'using \"flextable\"',                                    type         = \"text\"),      content_left          = list( content      = tab_ft,                                    type         = \"flextable\"),      content_right_header  = list( content      = 'using \"flextable_objecct\"',                                    type         = \"text\"),      content_right         = list( content      = tab_fto,                                    type         = \"flextable_object\")))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"adding-content-in-user-defined-locations","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Adding content in user-defined locations","title":"Templated Workflows","text":"want place content arbitrary locations slide can use user_location argument report_add_slide(). content type . also need supply start stop point. x-y coordinates measured upper left point slide define box content inserted. represent fractions total slide width (x) height (y): Note can use elements user_location together.","code":"obnd = report_add_slide(obnd,   template = \"two_content_header_text\",   elements = list(      title         = list( content      = \"Full figure with table\",                            type         = \"text\")),   user_location = list(      fig_example   = list( content      = p,                            type         = \"ggplot\",                            start        = c(0,.25),                            stop         = c(1,1)),      fto_example   = list( content      = tab_fto,                            type         = \"flextable_object\",                            start        = c(.70,0),                            stop         = c(1,.2))   ) )"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"saving-presentations","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Saving presentations","title":"Templated Workflows","text":"done adding content can save presentation file: look something like :","code":"save_report(obnd, \"vignette_presentation.pptx\")"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"accessing-the-powerpoint-mapping-information","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Accessing the PowerPoint mapping information","title":"Templated Workflows","text":"Sometimes can difficult remember template placeholder names mapping file. use onbrand::template_details function show information current onbrand object. want use interfaces creating slides like use named mapping information traditional officer workflow can use function fph. âve loaded onbrand object (obnd) can pull placeholder label PowerPoint named placeholder template layout specified yaml mapping file. example wanted placeholder label content_left_header two_content_header_text layout use following:","code":"details = template_details(obnd) Mapping:     /private/var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T/RtmprEolNe/temp_libpath1117956fcd423/onbrand/templates/report.yaml Report Type: PowerPoint title_slide (master/template)   > title (text)   > sub_title (text) section_slide (master/template)   > title (text)   > sub_title (text) title_only (master/template)   > title (text) content_text (master/template)   > title (text)   > sub_title (text)   > content_body (text) content_list (master/template)   > title (text)   > sub_title (text)   > content_body (list) two_content_header_list (master/template)   > title (text)   > sub_title (text)   > content_left_header (text)   > content_left (list)   > content_right_header (text)   > content_right (list) two_content_header_text (master/template)   > title (text)   > sub_title (text)   > content_left_header (text)   > content_left (text)   > content_right_header (text)   > content_right (text) two_content_list (master/template)   > title (text)   > sub_title (text)   > content_left (list)   > content_right (list) two_content_text (master/template)   > title (text)   > sub_title (text)   > content_left (text)   > content_right (text) ph = fph(obnd, \"two_content_header_text\", \"content_left_header\")$pl"},{"path":[]},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"loading-your-word-template","dir":"Articles","previous_headings":"Introduction > Word","what":"Loading your Word template","title":"Templated Workflows","text":"onbrand::read_template() function also used create new onbrand object Word report. Just , need supply path Word template mapping file. example points files within onbrand package:","code":"obnd = read_template(   template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),   mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"adding-content","dir":"Articles","previous_headings":"Introduction > Word","what":"Adding content","title":"Templated Workflows","text":"Word report content added using onbrand::report_add_doc_content() function. expects user identify type content supplied. high level following types content can added: \"break\" - page break \"toc\" - table contents \"ph\" - text content substitute placeholders document \"text\" - text supplied either character string, markdown result officer::fpar() statements \"imagefile\" - string containing path image file \"ggplot\" - ggplot object \"table\" - list containing table content options \"flextable\" - list containing flextable content options \"flextable_object\" - user-defined flextable object Similar adding PowerPoint content, must also supply list containing content information content. Examples provided sections . However see help onbrand::report_add_doc_content() get detailed explanation format content.","code":""},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"table-of-contents","dir":"Articles","previous_headings":"Introduction > Word","what":"Table of contents","title":"Templated Workflows","text":"table contents, list figures, list tables added using content type \"toc\". can supply level /onbrand style. supply level, TOC generated header level. supply onbrand style, TOC include element style. wish generate separate lists tables figures important onbrand styles point different Word styles. add typical TOC: add list tables: add list figures: Note: try update TOCs get following: table contents entries found. may need change separator option yaml mapping file : , ;.","code":"obnd = report_add_doc_content(obnd,   type     = \"toc\",   content  = list(level=3)) obnd = report_add_doc_content(obnd,   type     = \"toc\",   content  = list(style=\"Table_Caption\")) obnd = report_add_doc_content(obnd,   type     = \"toc\",   content  = list(style=\"Figure_Caption\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"text","dir":"Articles","previous_headings":"Introduction > Word","what":"Text","title":"Templated Workflows","text":"content type \"text\" straight forward way add content Word document, content list three possible elements. one required text element. just want add text default format (doc_def yaml mapping file), need :","code":"obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text=\"Text with no style specified will use the doc_def text format. This is a 'ph' placehoder for text: ===BODY-TEXT-EXAMPLE=== [see Placeholder text section below]\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"styles","dir":"Articles","previous_headings":"Introduction > Word > Text","what":"Styles","title":"Templated Workflows","text":"Alternatively can specify style defined yaml mapping file adding style element content list. shows create multi-level headers: Note: want use table figure caption numbers use section numbers (e.g.Â 1-1, 1-2, etc.) may want/need reset figure counter major section. need use fig_start_at tab_start_at arguments reset counters section.","code":"obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text  =\"First level header\",                   style = \"Heading_1\")) obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text  =\"Second level header\",                   style = \"Heading_2\")) obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text  =\"Third level header\",                   style = \"Heading_3\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"formats","dir":"Articles","previous_headings":"Introduction > Word > Text","what":"Formats","title":"Templated Workflows","text":"element may want control format content. previous examples just needed provide character data, three possible formats can use: \"text\" - character string (previous examples) \"md\" - character string markdown rendered (see section markdown ) \"fpar\" - officer::fpar() object officer (used paragraph text) \"ftext\" - list officer::ftext() objects officer (used captions notes figures tables) following provide example \"fpar\" \"md\" formats","code":"library(officer)  fpartext = fpar( ftext(\"Formatted text can be created using the \", prop=NULL), ftext(\"fpar \", prop=fp_text(color=\"green\")), ftext(\"command from the officer package.\", prop=NULL))  obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text   = fpartext,                    format = \"fpar\",                   style  = \"Normal\"))  mdtext = \"Formatted text can be created using **<color:green>markdown<\/color>** formatting\" obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text   = mdtext,                   format = \"md\",                   style  = \"Normal\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"figures-1","dir":"Articles","previous_headings":"Introduction > Word","what":"Figures","title":"Templated Workflows","text":"Similar PowerPoint example âre going create figures. image file (imgfile) ggplot object (p): can add specifying appropriate content type. content list can contain different information. Typically either specify image file ggplot object well caption:","code":"p = ggplot() + annotate(\"text\", x=0, y=0, label = \"picture example\") imgfile = tempfile(pattern=\"image\", fileext=\".png\") ggsave(filename=imgfile, plot=p, height=5.15, width=9, units=\"in\") obnd = report_add_doc_content(obnd,   type     = \"imagefile\",   content  = list(image   = imgfile,                   caption = \"This is an example of an image from a file.\")) obnd = report_add_doc_content(obnd,   type     = \"ggplot\",   content  = list(image   = p,                   caption = \"This is an example of an image from a ggplot object.\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"tables-1","dir":"Articles","previous_headings":"Introduction > Word","what":"Tables","title":"Templated Workflows","text":"Tables Word similar tables PowerPoint. table type can either table, flextable, flextable_object. Lets look data frame see use : insert native Word table, use table type content just list element named table value dataframe. figures, content list can optional caption well. Flextables can used flextable type information like headers, header formatting, etc can passed along. onbrand construct flextable . Lastly, control table can construct flextable pass along content.","code":"tdf =    data.frame(Parameters = c(\"Length\", \"Width\", \"Height\"),                     Values     = 1:3,                     Units      = c(\"m\", \"m\", \"m\") ) tab_cont = list(table   = tdf,                 caption = \"Word Table.\") obnd = report_add_doc_content(obnd,   type     = \"table\",   content  = tab_cont) tab_ft = list(table         = tdf,               header_format = \"md\",               header_top    = list(Parameters = \"Name^2^\",                                    Values     = \"*Value*\",                                    Units      = \"**Units**\"),               cwidth        = 0.8,               table_autofit = TRUE,               caption       = \"Flextable from onbrand abstraction\",               table_theme   = \"theme_zebra\") obnd = report_add_doc_content(obnd,   type     = \"flextable\",   content  = tab_ft) tab_fto = flextable(tdf)                       obnd = report_add_doc_content(obnd,   type     = \"flextable_object\",   content  = list(ft=tab_fto,                   caption  = \"Flextable object created by the user.\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"formatting-sections","dir":"Articles","previous_headings":"Introduction > Word","what":"Formatting sections","title":"Templated Workflows","text":"Section formatting, changing page orientation /number columns, controlled using \"section\" content type. may seem bit counter intuitive sections apply content added since last section type specification. now lets try following: Add landscape figure Add two column text Add content portrait orientation change formatting need close current section inserting portrait section type: add content want landscape mode: Now tell underlying report apply landscape formatting everything added since portrait section type: Now want add text two column format: Now insert section indicating want change section multiple columns. number columns inferred number elements widths argument: can now add content donât forget set insert portrait section end just save document.","code":"obnd = report_add_doc_content(obnd,      type     = \"section\",      content  = list(section_type  =\"portrait\")) obnd = report_add_doc_content(obnd,   type     = \"ggplot\",   content  = list(image   = p,                   height  = 2.5,                   width   = 9,                   caption = \"This is a landscape figure.\")) obnd = report_add_doc_content(obnd,   type     = \"section\",   content  = list(section_type  =\"landscape\",                   height        = 8,                   width         = 10)) obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text    = paste(rep(\"Some two column text.\", 200), collapse=\" \"))) obnd = report_add_doc_content(obnd,   type     = \"section\",   content  = list(section_type  =\"columns\",                   widths        = c(3,3))) obnd = report_add_doc_content(obnd,   type          = \"text\",   content       = list(text    = \"Back to regular portrait\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"placeholder-text","dir":"Articles","previous_headings":"Introduction > Word","what":"Placeholder text","title":"Templated Workflows","text":"generating reporting workflows can helpful placeholder text report populated based specifics report. add placeholders can use \"ph\" content type. content type appear yaml file, unique onbrand. placeholder unique string text surrounded sides === (three equal signs). placeholder template document, may work correctly type text Word. string may appear contiguous Word, may underlying XML code. ensure string contiguous type placeholder text text editor, copy paste Word template. placeholder can document template (footer header sections) text generate add part workflow. example, text ===BODY-TEXT-EXAMPLE=== added text content added first step . placeholder replaced text Swaps placeholder Text. can placeholders body previous example also headers footers document. , appear yaml mapping (abstraction layer). examples ===FOOTERLEFT=== ===HEADERLEFT=== placeholders found template . another placeholder ===HEADERRIGHT=== used can see final output. Headers applied document saved can added time onbrand report object.","code":"obnd = report_add_doc_content(obnd,   type     = \"ph\",   content  = list(name     = \"BODY-TEXT-EXAMPLE\",                   value    = \"Swaps the placeholder with this Text\",                   location = \"body\")) obnd = report_add_doc_content(obnd,   type     = \"ph\",   content  = list(name     = \"FOOTERLEFT\",                   value    = \"Text Swapped with Footer Placeholder\",                   location = \"footer\")) obnd = report_add_doc_content(obnd,   type     = \"ph\",   content  = list(name     = \"HEADERLEFT\",                   value    = \"Text Swapped with Header Placeholder\",                   location = \"header\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"formatting-sections-again","dir":"Articles","previous_headings":"Introduction > Word","what":"Formatting sections (again)","title":"Templated Workflows","text":"Recall multi-column page format, wanted return default portrait single column format. added text save file need tell document apply new section type: Note: donât alter page format/layout document default, need add section content.","code":"obnd = report_add_doc_content(obnd,   type     = \"section\",   content  = list(section_type  =\"portrait\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"multi-page-figures-and-tables","dir":"Articles","previous_headings":"Introduction > Word","what":"Multi-page figures and tables","title":"Templated Workflows","text":"figures tables need span multiple pages. large flextable automatically. However may desirable caption page figure table. accomplish , using figure example need create separate figure page. figure need provide key value. first figure key assigned figure number figures key number references first.","code":"obnd = report_add_doc_content(obnd,   type     = \"ggplot\",   content  = list(image           = p,                   notes_format    = \"text\",                   key             = \"ex_fig_text\",                   notes           = \"This figure shows how to use text captions _and_ notes\",                   caption_format  = \"text\",                   caption         = \"Multi-page figure (page 1)\"))  obnd = report_add_doc_content(obnd,   type     = \"break\",   content  = NULL)  obnd = report_add_doc_content(obnd,   type     = \"ggplot\",   content  = list(image           = p,                   notes_format    = \"text\",                   key             = \"ex_fig_text\",                   notes           = \"This figure shows how to use text captions _and_ notes\",                   caption_format  = \"text\",                   caption         = \"Multi-page figure (page 2)\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"cross-referencing-figures-and-tables","dir":"Articles","previous_headings":"Introduction > Word","what":"Cross referencing figures and tables","title":"Templated Workflows","text":"figures tables created content list optional key. example last section created key \"ex_fig_text\". reference word document two options. can construct content using onbrand markdown. simply need use ref tag: <ref:ex_fig_text> figure number replaced document built. can also use officer::fpar() function construct content. use officer command officer::run_reference() figure key insert figure number.","code":""},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"saving-the-word-report","dir":"Articles","previous_headings":"Introduction > Word","what":"Saving the Word report","title":"Templated Workflows","text":"done adding content can save report file `save_report()`` function well: output example look like :","code":"save_report(obnd, \"vignette_report.docx\")"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"accessing-the-word-mapping-information","dir":"Articles","previous_headings":"Introduction > Word","what":"Accessing the Word mapping information","title":"Templated Workflows","text":"can also useful quickly access onbrand style names. can use onbrand::template_details function display current styles available : PowerPoint interface, can also access named Word mapping directly. done fst function. onbrand objected loaded (obnd) can supply onbrand style name pull Word style name (wsn) default font format (dff):","code":"details = template_details(obnd) Mapping:     /private/var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T/RtmprEolNe/temp_libpath1117956fcd423/onbrand/templates/report.yaml Report Type: Word   onbrand style (word style, style type)   --------------------------------------   Code (Code, paragraph)   Figure_Caption (graphic title, paragraph)   Heading_1 (heading 1, paragraph)   Heading_2 (heading 2, paragraph)   Heading_3 (heading 3, paragraph)   Normal (Normal, paragraph)   Notes (Notes, paragraph)   TOC (toc 1, paragraph)   Table_Caption (table title, paragraph)   Table (Table Grid, table) st = fst(obnd, \"Heading_3\") #Word style name wsn = st$wsn # Default font format dff = st$dff"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"formatting-with-markdown","dir":"Articles","previous_headings":"Introduction","what":"Formatting with markdown","title":"Templated Workflows","text":"officer can change formatting text using fpar as_pargraph. situations less ideal. example want take formatted user input Shiny app, may practical supply code way. make formatting little easier, onbrand provides ability use markdown. can seen flextable objects PowerPoint content text, captions Word. list allowed markdown formatting see help `onbrand::md_to_officer()``. want use markdown functionality outside onbrand can use two functions: onbrand::md_to_officer - function take markdown text convert strings text containing officer commands fpar as_paragraph commands. simply need use eval command execute . onbrand::md_to_oo - function wraps around md_to_officer returns as_paragraph result.","code":""},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"using-onbrandmd_to_oo-to-format","dir":"Articles","previous_headings":"Introduction > Formatting with markdown","what":"Using onbrand::md_to_oo to format","title":"Templated Workflows","text":"First lets start data. dimensional data listed mean variance: Now lets create flextable object header shows property reported one line units line : flextable currently looks like :  Length Wdith Area Volume  cm cm cm2 cm3 mean 200.00 12.00 240.00 1,200.00 variance 0.13 0.05 0.11 0.32 Now, lets customize things. example, suppose want use exponents units represent mean variance \\(\\mu\\) \\(\\sigma^2\\). First, need create lists default value table labels (.e.Â header) table body. markdown create deviations defaults. can look help onbrand::md_to_oo get appropriate list format. âre just pulling onbrand object using onbrand::fetch_md_def(). Now can use flextable::compose function walk table overwrite defaults set flextable created: Now flextable object looks like :  Length Wdith Area Volume  cm cm cm2 cm3 m 200.00 12.00 240.00 1,200.00 s2 0.13 0.05 0.11 0.32 Note Greek symbols rendered correctly rendered correctly document. include newly formatted table onbrand object, use method :","code":"data = data.frame(property = c(\"mean\",   \"variance\"),                   length     = c(200,      0.13),                   width      = c(12,       0.05),                   area       = c(240,      0.11),                   volume     = c(1200,     0.32)) header = list(property = c(\"\",             \"\"),               length   = c(\"Length\",       \"cm\"),               width    = c(\"Wdith\",        \"cm\"),               area     = c(\"Area\",         \"cm2\"),               volume   = c(\"Volume\",       \"cm3\"))  ft = flextable::flextable(data)                     %>%       flextable::delete_part(part = \"header\")        %>%      flextable::add_header(values =as.list(header)) %>%      flextable::theme_zebra() dft      = fetch_md_def(obnd, style=\"Table_Labels\")$md_def dft_body = fetch_md_def(obnd, style=\"Table\")$md_def ft = ft %>%   flextable::compose(j     = \"area\",           part  = \"header\",            value = c(md_to_oo(\"Area\", dft)$oo, md_to_oo(\"cm^2^\", dft)$oo))   %>%   flextable::compose(j     = \"volume\",            part  = \"header\",           value = c(md_to_oo(\"Volume\", dft)$oo, md_to_oo(\"cm^3^\", dft)$oo)) %>%   flextable::compose(j     = \"property\",            i     = match(\"mean\", data$property),                                   part  = \"body\",             value = c(md_to_oo(\"**<ff:symbol>m<\/ff>**\", dft_body)$oo))    %>%   flextable::compose(j     = \"property\",           i     = match(\"variance\", data$property),            part  = \"body\",                                                                value = c(md_to_oo(\"**<ff:symbol>s<\/ff>**^**2**^\", dft_body)$oo)) obnd = report_add_doc_content(obnd,   type     = \"flextable_object\",   content  = list(ft=tab_fto,                   caption  = \"Flextable object with custom Markdown - created by the user.\"))"},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"accessing-the-officer-object-directly","dir":"Articles","previous_headings":"Introduction","what":"Accessing the officer object directly","title":"Templated Workflows","text":"Sometimes need control creating report, may want use officer commands directly. can use function fetch_officer_object() pull officer object onbrand object: Now can use officer command wish rpt object. âre done can put object back onbrand object using set_officer_object():","code":""},{"path":"/articles/Creating_Templated_Office_Workflows.html","id":"mapping-file","dir":"Articles","previous_headings":"Introduction","what":"Mapping file","title":"Templated Workflows","text":"","code":"rpptx:   master: Office Theme   templates:     title_slide:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Subtitle 2         content_type: text     section_slide:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Subtitle 2         content_type: text     title_only:       title:         ph_label:     Title 1         content_type: text     content_text:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Content Placeholder 10         content_type: text       content_body:         ph_label:     Content Placeholder 2         content_type: text     content_list:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Content Placeholder 10         content_type: text       content_body:         ph_label:     Content Placeholder 2         content_type: list     two_content_header_list:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Content Placeholder 10         content_type: text       content_left_header:         ph_label:     Text Placeholder 2         content_type: text       content_left:         ph_label:     Content Placeholder 2         content_type: list       content_right_header:         ph_label:     Text Placeholder 4         content_type: text       content_right:         ph_label:     Content Placeholder 3         content_type: list     two_content_header_text:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Content Placeholder 10         content_type: text       content_left_header:         ph_label:     Text Placeholder 2         content_type: text       content_left:         ph_label:     Content Placeholder 2         content_type: text       content_right_header:         ph_label:     Text Placeholder 4         content_type: text       content_right:         ph_label:     Content Placeholder 3         content_type: text     two_content_list:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Content Placeholder 10         content_type: text       content_left:         ph_label:     Content Placeholder 2         content_type: list       content_right:         ph_label:     Content Placeholder 3         content_type: list     two_content_text:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Content Placeholder 10         content_type: text       content_left:         ph_label:     Content Placeholder 2         content_type: text       content_right:         ph_label:     Content Placeholder 3         content_type: text   md_def:     default:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Table_Labels:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent   post_processing:           NULL rdocx:   styles:     Normal:                    Normal     Notes:                     Notes     Code:                      Code     TOC:                       toc 1     Heading_1:                 heading 1     Heading_2:                 heading 2     Heading_3:                 heading 3     Table:                     Table Grid     Table_Caption:             table title     Figure_Caption:            graphic title   doc_def:     Text:                      Normal     Table:                     Table     Table_Caption:             Table_Caption     Figure_Caption:            Figure_Caption     Notes:                     Notes   formatting:     separator:                 \",\"     Table_Order:       - table       - notes       - caption     Table_Caption_Label_Pre:   \"Table \"     Table_Caption_Label_Post:  \". \"     Figure_Order:       - figure       - notes       - caption     Figure_Caption_Label_Pre:  \"Figure \"     Figure_Caption_Label_Post: \". \"     Figure_Width:              6.0     Figure_Height:             5.0     Figure_Seq_Id:             \"Figure\"     Figure_Number: |-       list(officer::run_autonum(pre_label  = \"\",                                  seq_id     = Caption_Seq_Id,                                  post_label = \"\",                                  start_at   = Caption_Start_At))     Table_Seq_Id:              \"Table\"     Table_Number: |-       list(officer::run_autonum(pre_label  = \"\",                                  seq_id     = Caption_Seq_Id,                                  post_label = \"\",                                  start_at   = Caption_Start_At))   md_def:     # For each style above you need a default specification here. You will     # also need the 'default' specification, generally just a copy of Normal     default:       color:                  black       font.size:              12       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Cambria (Body)       vertical.align:         baseline       shading.color:          transparent     Table_Labels:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Notes:       color:                  black       font.size:              10       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Cambria (Body)       vertical.align:         baseline       shading.color:          transparent     Normal:       color:                  black       font.size:              12       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Cambria (Body)       vertical.align:         baseline       shading.color:          transparent     Code:       color:                  black       font.size:              12       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Courier       vertical.align:         baseline       shading.color:          transparent     TOC:       color:                  black       font.size:              12       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Courier       vertical.align:         baseline       shading.color:          transparent     Heading_1:       color:                  black       font.size:              16       bold:                   TRUE       italic:                 FALSE       underlined:             FALSE       font.family:            Calibri (Headings)       vertical.align:         baseline       shading.color:          transparent     Heading_2:       color:                  black       font.size:              13       bold:                   TRUE       italic:                 FALSE       underlined:             FALSE       font.family:            Calibri (Headings)       vertical.align:         baseline       shading.color:          transparent     Heading_3:       color:                  black       font.size:              12       bold:                   TRUE       italic:                 FALSE       underlined:             FALSE       font.family:            Calibri (Headings)       vertical.align:         baseline       shading.color:          transparent     Table:       color:                 black       font.size:             12       bold:                  FALSE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Table_Caption:       color:                 black       font.size:             12       bold:                  TRUE       italic:                TRUE       underlined:            FALSE       font.family:           Cambria (Body)       vertical.align:        baseline       shading.color:         transparent     Figure_Caption:       color:                 black       font.size:             12       bold:                  TRUE       italic:                TRUE       underlined:            FALSE       font.family:           Cambria (Body)       vertical.align:        baseline       shading.color:         transparent   post_processing:           NULL"},{"path":"/articles/Custom_Office_Templates.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Custom Templates","text":"main purpose onbrand create abstraction layer allows reporting workflow used different document templates. order , abstraction information (mapping) needs provided yaml configuration file. process detailed , high level involves following steps: Read template using function: onbrand::view_layout() Use resulting files create mapping (saved .yaml) Test mapping accuracy using function: onbrand::preview_template() following sections describe process detail Word PowerPoint documents. get started, copy provided examples current working directory. , use following code: create following files: example.pptx - example PowerPoint template example.docx - example Word template example.yaml - example yaml mapping file (shown bottom)","code":"library(onbrand) file.copy(system.file(package=\"onbrand\",\"examples\",\"example.pptx\"), \".\", overwrite = TRUE) file.copy(system.file(package=\"onbrand\",\"examples\",\"example.docx\"), \".\", overwrite = TRUE) file.copy(system.file(package=\"onbrand\",\"examples\",\"example.yaml\"), \".\", overwrite = TRUE)"},{"path":"/articles/Custom_Office_Templates.html","id":"mapping-and-the-yaml-file-format","dir":"Articles","previous_headings":"Introduction","what":"Mapping and the yaml file format","title":"Custom Templates","text":"start discussing create templates need talk little bit yaml file format (âs recursive nature). already understand , feel free skip ahead relevant section . onbrand utilizes yaml file method describing information hierarchical manner using key/value pairs. help understand better, consider following example colors different parts tree listed hierarchy based parts located tree: example lays key: value pairs based formatting file. key followed colon space (:) , turn, followed value. multiple values can list key (see spacing). value also colon âs key nested value. main key example tree colors. key three values: roots, trunk, crown. One section tree. hierarchy comes indentation. main sections tree indented two spaces. values (roots, trunk, crown) also keys end colon space - followed still values. color values associated roots white brown. root hierarchy complete. trunk value bark. , bark also indented two spaces followed colon space, also key value brown. completes trunk hierarchy. value crown indented two spaces followed colon space. Hence, crown key value branches. , branches indented followed colon space. , branches also key values: leaves flowers. also indented followed colon space. key leaves value green. Similarly, key flowers value red. completes crown hierarchy. can go yaml file, enough help understand create mapping files onbrand. details see (yaml.org)[yaml.org].","code":"tree colors:   roots:     - white      - brown   trunk:     bark: brown   crown:     branches:       leaves:  green       flowers: red"},{"path":"/articles/Custom_Office_Templates.html","id":"powerpoint","dir":"Articles","previous_headings":"Introduction","what":"PowerPoint","title":"Custom Templates","text":"section provides detailed walk-three steps Introduction. recommend everyone walk process least . quick note terminology. slide master top slide hierarchy slides stores information theme slide layouts presentation, including background, color, fonts, effects, placeholder sizes, positioning. slide master largest slide image top slide thumbnail list.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"step-1-read-the-powerpoint-template","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Step 1: Read the PowerPoint template","title":"Custom Templates","text":"create custom abstraction layer PowerPoint, start reading master template. donât already one, create PowerPoint template master slide slide layouts different layouts want use. example, Office Theme Master Slide two slide layouts: title slide named: title content slide two columns information named: two_col Tip make slide layouts master, give descriptive name easy use coding later. names used refer within scripts. PowerPoint assigns read-names every placeholder within slide layout. reveal read-names, create annotated slide deck using onbrand::view_layout() function: create file example_layout.pptx. contains slide slide layout (title & two_col) master (Office Theme) input template file (example.pptx). slide, names slide layout slide master indicated upper right corner. placeholder within slide layout shown identified placeholder label (ph_label). placeholder within slide layout slide master, onbrand::view_layout() produces three pieces information: ph_label, type, index. Notice, plenty duplicate placeholder names.","code":"library(onbrand) vlres = view_layout(template    = \"example.pptx\",                      output_file = \"example_layout.pptx\")"},{"path":"/articles/Custom_Office_Templates.html","id":"step-2-create-the-powerpoint-mapping","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Step 2: Create the PowerPoint mapping","title":"Custom Templates","text":"get mapping, take moment locate open example.yaml file copied start vignette. yaml file key mapping PowerPoint templates (rows 1-39 file). key called rpptx three values (also keys): master - Holds name master slide templates - element slide layout want use template md_def - Default formatting markdown formatting used Within hierarchy rpptx: templates: value slide layout: title two_col. Remember tip Step 1 names? name provided becomes key value yaml. âs used reference placeholders slide code. Notice, example.yaml doesnât contain placeholders either slide example_layout.pptx. elements inherited master slide unique either slide layouts. yaml, placeholder two value pairs . example, placeholder sub_title slide layout title ph_label content_type. ph_label maps ph_label annotated layout (example_layout.pptx). content_type either text list depending whether placeholder contains text list data. figure shows annotated layout relates yaml mapping file. Note: define mapping information slide layouts master want access R. can many masters defined template want use subset R.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"defining-markdown-defaults","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Defining markdown defaults","title":"Custom Templates","text":"Now need define defaults rendering components markdown (see Workflow vignette information used). need create elements following hierarchy: PowerPoint templates need define sections: default Table_Labels. default used rendering general markdown text. Table_Labels used markdown present table elements like headers. need define different aspects fonts. âre unsure, just leave defaults .","code":"rpptx:   md_def:     default:             color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Table_Labels:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent   post_processing:           NULL"},{"path":"/articles/Custom_Office_Templates.html","id":"post-processing","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Post-processing","title":"Custom Templates","text":"Sometimes may wish modify underlying officer object. call save_report(), just writing file, function look field post_processing. can define R code modify officer object. Within post-processing environment officer object rpt containing report available. modify object apply changes want made. post_processing element missing value NULL post-processing step skipped.","code":"rpptx:   post_processing:           NULL"},{"path":"/articles/Custom_Office_Templates.html","id":"step-3-testing-and-previewing-your-template","dir":"Articles","previous_headings":"Introduction > PowerPoint","what":"Step 3: Testing and previewing your template","title":"Custom Templates","text":"R can read template supplying template mapping file names: template read, onbrand check basic errors. Look messages console help debug issues may . reading template, can test template using onbrand::preview_template(). Tip Save obnd report file view make sure mappings expect. âs . completed PowerPoint example used onbrand create abstraction layer use efforts. Keep mind, straightforward example. Depending complexity template annotated slide deck generated using onbrand::view_layout() probably look nearly clean. placeholders ; may formatted nicely. Expect find annotations interested using mapping.","code":"obnd = read_template(template = \"example.pptx\",                        mapping  = \"example.yaml\") obnd = preview_template(obnd) save_report(obnd, \"example_preview.pptx\")"},{"path":"/articles/Custom_Office_Templates.html","id":"word","dir":"Articles","previous_headings":"Introduction","what":"Word","title":"Custom Templates","text":"section provides detailed walk-three steps Introduction. , recommend everyone walk process least . fact, assume already worked PowerPoint section. donât feel comfortable abstraction layers yaml syntax, might want walk section first. Another quick note terminology. Word documents, even blank document, start template. PowerPoint templates closely tied specific slide layouts, Word templates files help design documents. contain content design elements (referred content blocks styles) use starting point creating document. formatting complete; simply add want .","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"step-1-read-the-word-document","dir":"Articles","previous_headings":"Introduction > Word","what":"Step 1: Read the Word document","title":"Custom Templates","text":"create custom abstraction layer Word, start reading Word document saved template using. Word document styles defined contain placeholders want use. example.docx one paragraph style one table style. Placeholder can used documents. example, wanted use template reports, wanted âReport NNNNâ, NNNN report number, right header. place text placeholder, e.g., âReport ===RPTNUM===â, right header. placeholder referenced code; Creating Templated Office Workflows Vignette details. Note: type placeholder text directly Word document. Cut paste text Word document text editor. Word text editor, text string may appear contiguous, may underlying XML code. view styles document can use onbrand::view_layout() function well: produce word document, example_layout.docx looks something like :","code":"library(onbrand) vlres = view_layout(template    = \"example.docx\",                      output_file = \"example_layout.docx\")"},{"path":"/articles/Custom_Office_Templates.html","id":"step-2-create-the-word-mapping","dir":"Articles","previous_headings":"Introduction > Word","what":"Step 2: Create the Word mapping","title":"Custom Templates","text":"paragraph, character, table style, example_layout.docx displays name style looks like. can use define elements yaml mapping file. process similar PowerPoint section go much detail time. example.yaml file copied earlier, key mapping Word templates. key called rdocx following values: styles - maps user-generated (keys) content block respective Word style_name (values) doc_def - maps keys defined styles section default values report formatting - general formatting options document md_def - default formatting styles markdown used following sections walk elements example.yaml mapping file.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"styles","dir":"Articles","previous_headings":"Introduction > Word > Step 2: Create the Word mapping","what":"styles","title":"Custom Templates","text":"section contains onbrand Word mappings key/value pairs. keys represent name content block want use R code. values, generated onbrand::view_layout() found example_layout.docx, represent style name used Word. example, following styles defined: , example, Normal style defined Word, âm going call Plain_Text workflows develop. Note: functions onbrand require define least two styles: one paragraph style one table style.","code":"styles:     Plain_Text:               Normal     Default_Table:            Normal Table     Table_Caption:            Normal             Figure_Caption:           Normal     Notes:                    Normal"},{"path":"/articles/Custom_Office_Templates.html","id":"doc_def","dir":"Articles","previous_headings":"Introduction > Word > Step 2: Create the Word mapping","what":"doc_def","title":"Custom Templates","text":"section contains default style mappings key/value pairs. keys required onbrand, entry . values user-generated (keys) styles section. , example want insert Word table (Table) document going generate, table formatted according onbrand style name Default_Table.","code":"doc_def:                          Text:                     Plain_Text      Table:                    Default_Table      Table_Caption:            Table_Caption     Figure_Caption:           Figure_Caption     Notes:                    Notes"},{"path":"/articles/Custom_Office_Templates.html","id":"formatting","dir":"Articles","previous_headings":"Introduction > Word > Step 2: Create the Word mapping","what":"formatting","title":"Custom Templates","text":"Basic document formatting specified key yaml file. default values shown : separator key region specific setting. experimentation seems US Canada, comma, Europe semicolon. mainly appears table contents generation (list figures tables). try generate table contents keep getting table contents entries found. try changing separator â;â â,â reverse. *_Order keys indicate order figure table, caption notes displayed. *_Pre *_Post elements control displayed (Pre) (Post) caption number. example third table look like: Table 3.. default figure width height specified inches. probably wont need change keys ending _Seq_Id _Number. *_Seq_Id specifies internal Word sequences used group tables figures. *_Number keys specify want number things. default value, appearing complicated, just give single number. want number figures current section number (e.g.Â 3-2 second figure third section) following: Note: figures tables multiple sections, also need reset figure counter major section contains figures tables. need use fig_start_at tab_start_at arguments report_add_doc_content().","code":"formatting:     separator:                 \",\"     Table_Order:       - table       - notes       - caption     Table_Caption_Label_Pre:   \"Table \"     Table_Caption_Label_Post:  \". \"     Figure_Order:       - figure       - notes       - caption     Figure_Caption_Label_Pre:  \"Figure \"     Figure_Caption_Label_Post: \". \"     Figure_Width:              6.0     Figure_Height:             5.0     Figure_Seq_Id:             \"Figure\"     Figure_Number: |-       list(officer::run_autonum(pre_label  = \"\",                                  seq_id     = Caption_Seq_Id,                                  post_label = \"\",                                  start_at   = Caption_Start_At))     Table_Seq_Id:              \"Table\"     Table_Number: |-       list(officer::run_autonum(pre_label  = \"\",                                  seq_id     = Caption_Seq_Id,                                  post_label = \"\",                                  start_at   = Caption_Start_At)) Figure_Number: |-       list(       run_word_field(\"STYLEREF 1 \\\\s\"),       ftext(\"-\"),       officer::run_autonum(pre_label  = \"\",                                  seq_id     = Caption_Seq_Id,                                  post_label = \"\",                                  start_at   = Caption_Start_At))"},{"path":"/articles/Custom_Office_Templates.html","id":"md_def","dir":"Articles","previous_headings":"Introduction > Word > Step 2: Create the Word mapping","what":"md_def","title":"Custom Templates","text":"elements contain default values used markdown formatting used. section, need entries default Table_Labels well entry style defined styles section. default used rendering general markdown text. Table_Labels used markdown present table elements like headers. Tip âs good idea open styles Word make sure style element (font size, bold, etc) matches Word document.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"post_processing","dir":"Articles","previous_headings":"Introduction > Word > Step 2: Create the Word mapping","what":"post_processing","title":"Custom Templates","text":"Just like PowerPoint templates can define R code post-process report officer object. need modify object rpt defined post-processing environment. post_processing element missing yaml file set NULL ignored.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"step-3-testing-and-previewing-your-template-1","dir":"Articles","previous_headings":"Introduction > Word","what":"Step 3: Testing and previewing your template","title":"Custom Templates","text":"âre done creating abstraction layer (.e., mapping), can test template. R can read template supplying template mapping file names: problems can use onbrand::preview_template() create annotated file showing onbrand names mapped Word names style applied. Tip Save obnd report file view make sure mappings expect. , âs . completed Word example used onbrand create abstraction layer use efforts. , straightforward example. Word templates can also become fairly complex, fairly quickly. Luckily, per template now! Tip Now walked-example, best way learn Word templates change something walk steps . example file, using base word document template. running steps . can add additional styles document opening styles pane, selecting appropriate style, saving (new name easily see difference). Similarly, can also select new theme new style set design tab. rerun onbrand::view_layout() see âs changed.","code":"obnd = read_template(template = \"example.docx\",                       mapping  = \"example.yaml\") obnd = preview_template(obnd) save_report(obnd, \"example_preview.docx\")"},{"path":"/articles/Custom_Office_Templates.html","id":"switching-templates","dir":"Articles","previous_headings":"Introduction","what":"Switching templates","title":"Custom Templates","text":"goal onbrand allow users easily switch organizational document templates without changing actual reporting workflow. accomplished yaml file (.e., abstraction layer). First, make copy yaml file new templates. , modify copy described :","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"powerpoint-1","dir":"Articles","previous_headings":"Introduction > Switching templates","what":"PowerPoint","title":"Custom Templates","text":"want change new PowerPoint template need following: Master, create slide layouts names Create layouts elements previous template Use onbrand::view_layout() new template get mapping new placeholders Edit new yaml file update master field, ph_label fields, md_def field. Confirm new template behaving expected using onbrand::preview_template() Note: template certain elements missing need set ph_label value NULL. example changing new template subtitles, workflow specified, slide subtitle need set value NULL.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"word-1","dir":"Articles","previous_headings":"Introduction > Switching templates","what":"Word","title":"Custom Templates","text":"want change new Word template need following: Create document types styles mapping file Use onbrand::view_layout() new template get mapping new styles Edit new yaml file update styles section new names used Word (keeping onbrand style names ) Confirm new template behaving expected using onbrand::preview_template()","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"using-your-new-template","dir":"Articles","previous_headings":"Introduction > Switching templates","what":"Using your new template","title":"Custom Templates","text":"new template mapping file can use top level reporting workflow calling onbrand::read_template() . learn reporting workflows, walk second vignette: Creating Templated Office Workflows.","code":""},{"path":"/articles/Custom_Office_Templates.html","id":"mapping-file","dir":"Articles","previous_headings":"Introduction","what":"Mapping file","title":"Custom Templates","text":"","code":"rpptx:   master: Office Theme   templates:     title:       title:         ph_label:     Title 1         content_type: text       sub_title:         ph_label:     Subtitle 2         content_type: text     two_col:       title:         ph_label:     Title 1         content_type: text       left_content:         ph_label:     Content Placeholder 2         content_type: text       right_content:         ph_label:     Content Placeholder 3         content_type: text   md_def:     default:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Table_Labels:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent   post_processing:           NULL rdocx:   styles:     Plain_Text:               Normal     Default_Table:            Normal Table     Table_Caption:            Normal     Figure_Caption:           Normal   doc_def:     Text:                     Plain_Text     Table:                    Default_Table     Table_Caption:            Table_Caption     Figure_Caption:           Figure_Caption   formatting:     separator:                 \",\"     Table_Order:       - table       - notes       - caption     Table_Caption_Label_Pre:   \"Table \"     Table_Caption_Label_Post:  \". \"     Figure_Order:       - figure       - notes       - caption     Figure_Caption_Label_Pre:  \"Figure \"     Figure_Caption_Label_Post: \". \"     Figure_Width:              6.0     Figure_Height:             5.0     Figure_Seq_Id:             \"Figure\"     Figure_Number: |-       list(officer::run_autonum(pre_label  = \"\",                                 seq_id     = Caption_Seq_Id,                                 post_label = \"\",                                 start_at   = Caption_Start_At))     Table_Seq_Id:              \"Table\"     Table_Number: |-       list(officer::run_autonum(pre_label  = \"\",                                 seq_id     = Caption_Seq_Id,                                 post_label = \"\",                                 start_at   = Caption_Start_At))   md_def:     default:       color:                  black       font.size:              12       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Cambria (Body)       vertical.align:         baseline       shading.color:          transparent     Table_Labels:       color:                 black       font.size:             12       bold:                  TRUE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Plain_Text:       color:                  black       font.size:              12       bold:                   FALSE       italic:                 FALSE       underlined:             FALSE       font.family:            Cambria (Body)       vertical.align:         baseline       shading.color:          transparent     Default_Table:       color:                 black       font.size:             12       bold:                  FALSE       italic:                FALSE       underlined:            FALSE       font.family:           Helvetica       vertical.align:        baseline       shading.color:         transparent     Table_Caption:       color:                 black       font.size:             12       bold:                  TRUE       italic:                TRUE       underlined:            FALSE       font.family:           Cambria (Body)       vertical.align:        baseline       shading.color:         transparent     Figure_Caption:       color:                 black       font.size:             12       bold:                  TRUE       italic:                TRUE       underlined:            FALSE       font.family:           Cambria (Body)       vertical.align:        baseline       shading.color:         transparent   post_processing:           NULL"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Harrold. Author, maintainer. Bryan Smith. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harrold J, Smith B (2023). onbrand: Templated Reporting Workflows Word PowerPoint. R package version 1.0.4, https://onbrand.ubiquity.tools/.","code":"@Manual{,   title = {onbrand: Templated Reporting Workflows in Word and PowerPoint},   author = {John Harrold and Bryan Smith},   year = {2023},   note = {R package version 1.0.4},   url = {https://onbrand.ubiquity.tools/}, }"},{"path":"/index.html","id":"onbrand-","dir":"","previous_headings":"","what":"Templated Reporting Workflows in Word and PowerPoint ","title":"Templated Reporting Workflows in Word and PowerPoint ","text":"officer package provides extensive methods accessing, creating, modifying Word PowerPoint documents. methods require obtaining document specific placeholder style information. order switch document templates, necessary change references within reporting code. purpose onbrand provide abstraction layer template details mapped human-readable names. human-readable names combined mapping information - template-specific yaml file - provides systematic method script support different Word PowerPoint templates. means, workflow support multiple outputs. makes life easier , thus, makes world little better place.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Templated Reporting Workflows in Word and PowerPoint ","text":"can install released version onbrand CRAN : development version GitHub :","code":"install.packages(\"onbrand\") # Installing devtools if it's not already installed if(system.file(package=\"devtools\") == \"\"){   install.packages(\"devtools\")  } devtools::install_github(\"john-harrold/onbrand\", dependencies=TRUE)"},{"path":"/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Templated Reporting Workflows in Word and PowerPoint ","text":"Browse documentation check vignettes: Custom Templates Templated Workflows vignettes contain everything need walk basics.","code":""},{"path":"/reference/add_pptx_ph_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Populate Placeholder In Officer Report â add_pptx_ph_content","title":"Populate Placeholder In Officer Report â add_pptx_ph_content","text":"Places content PowerPoint placeholder given officer document.","code":""},{"path":"/reference/add_pptx_ph_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populate Placeholder In Officer Report â add_pptx_ph_content","text":"","code":"add_pptx_ph_content(   obnd,   content_type,   content,   ph_label = NULL,   user_location = NULL,   verbose = TRUE )"},{"path":"/reference/add_pptx_ph_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populate Placeholder In Officer Report â add_pptx_ph_content","text":"obnd onbrand report object content_type string indicating content type content content (see details ) ph_label placeholder location (text, NULL user_location used) user_location User specified location using ph_location() NULL ph_label used. verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/add_pptx_ph_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populate Placeholder In Officer Report â add_pptx_ph_content","text":"officer pptx object content added","code":""},{"path":"/reference/add_pptx_ph_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Populate Placeholder In Officer Report â add_pptx_ph_content","text":"content type listed following content expected: \"text\" text string information \"list\" vector paired values (indent level text), eg.  c(1, \"Main Bullet\", 2 \"Sub Bullet\") \"imagefile\" string containing path image file \"ggplot\" ggplot object, eg. p = ggplot() + .... \"table\" list containing table content options following elements (defaults parenthesis): table Data frame containing tabular data header Boolean variable control displaying header (TRUE) first_row Boolean variable indicate first row contains header information (TRUE) \"flextable\" list containing flextable content options following elements (defaults parenthesis): table Data frame containing tabular data header_top, header_middle, header_bottom (NULL) list names data frame names containing tabular data values header text show table header_format string containing format, either \"text\", \"md\" (default NULL assumes \"text\" format) merge_header (TRUE) Set true combine column headers information table_body_alignment, table_header_alignment (\"center\") Controls alignment table_autofit (TRUE) Automatically fit content, specify cell width height cwidth (0.75) cheight (0.25) table_theme (\"theme_vanilla\") Table theme \"flextable_object\" user defined flextable object","code":""},{"path":[]},{"path":"/reference/build_span.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Table Span From Components â build_span","title":"Construct Table Span From Components â build_span","text":"Takes large table, common rows, header information constructs table subset components using supplied ranges rows columns.","code":""},{"path":"/reference/build_span.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Table Span From Components â build_span","text":"","code":"build_span(   table_body = NULL,   row_common = NULL,   table_body_head = NULL,   row_common_head = NULL,   header_format = \"text\",   obnd = NULL,   row_sel = NULL,   col_sel = NULL,   table_alignment = \"center\",   inner_border = officer::fp_border(color = \"black\", width = 0.3),   outer_border = officer::fp_border(color = \"black\", width = 2),   set_header_inner_border_v = TRUE,   set_header_inner_border_h = TRUE,   set_header_outer_border = TRUE,   set_body_inner_border_v = TRUE,   set_body_inner_border_h = FALSE,   set_body_outer_border = TRUE,   notes_detect = NULL )"},{"path":"/reference/build_span.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Table Span From Components â build_span","text":"table_body Data frame body large table. row_common Data frame common rows. table_body_head Data frame matrix headers table body. row_common_head Data frame matrix headers common rows. header_format Format header either \"text\" (default) \"md\" markdown. obnd Optional onbrand object used format markdown. default NULL value use default formatting. row_sel Indices rows build table . col_sel Indices columns build table . table_alignment Character string specifying alignment #'table (body headers). Can \"center\" (default), \"left\", \"right\", \"justify\" inner_border Border object inner border lines defined using officer::fp_border() outer_border Border object outer border lines defined using officer::fp_border() set_header_inner_border_v Boolean value enable disable inner vertical borders headers set_header_inner_border_h Boolean value enable disable inner horizontal borders headers set_header_outer_border Boolean value enable disable outer border headers set_body_inner_border_v Boolean value enable disable inner vertical borders body set_body_inner_border_h Boolean value enable disable inner horizontal borders body set_body_outer_border Boolean value enable disable outer border borders body notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")).","code":""},{"path":"/reference/build_span.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Table Span From Components â build_span","text":"list following elements df:     Data frame built table. ft:     data frame flextable object. notes:  Note placeholders found table.","code":""},{"path":"/reference/build_span.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Table Span From Components â build_span","text":"way data frames relate mapped . dimensions different data frames identified (nrow x ncol) ``` #                            col_sel #                      |<--------------->| # #|--------------------------------------------| --- #|                 |   .                 .    |  ^ #|                 |   .                 .    |  | #| row_common_head |   . table_body_head .    |  | m #|      m x n      |   .      m x c      .    |  | #|                 |   .                 .    |  v #|--------------------------------------------| --- #|                 |   .                 .    |  ^ #|                 |   .                 .    |  | #|    row_common   |   .   table_body    .    |  | #|      r x n      |   .     r x c       .    |  | #|                 |   .                 .    |  | #|.................|..........................|  |     - #|                 |   ./  /  /  /  /  / .    |  |     ^ #|                 |   .  /  /  /  /  /  .    |  | r   | #|                 |   . /  /  /  /  /  /.    |  |     | row_sel #|                 |   ./  /  /  /  /  / .    |  |     | #|                 |   .  /  /  /  /  /  .    |  |     v #|.................|...../../../../../../.... |  |     - #|                 |   .                 .    |  | #|                 |   .                 .    |  v #|--------------------------------------------| --- # #|<--------------->|<------------------------>| #        n                    c ```","code":""},{"path":"/reference/fetch_md_def.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Markdown Default Format from onbrand Object â fetch_md_def","title":"Fetch Markdown Default Format from onbrand Object â fetch_md_def","text":"Used extract formatting elements given style onbrand object.","code":""},{"path":"/reference/fetch_md_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Markdown Default Format from onbrand Object â fetch_md_def","text":"","code":"fetch_md_def(obnd, style = \"default\", verbose = TRUE)"},{"path":"/reference/fetch_md_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Markdown Default Format from onbrand Object â fetch_md_def","text":"obnd onbrand report object style name style md_def report type obnd fetch (\"default\") verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/fetch_md_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Markdown Default Format from onbrand Object â fetch_md_def","text":"list following elements isgood: Boolean variable indicating success failure md_def: List default format specified style msgs: Vector messages","code":""},{"path":"/reference/fetch_md_def.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Markdown Default Format from onbrand Object â fetch_md_def","text":"","code":"obnd = read_template(    template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),    mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\")) obnd = fetch_md_def(obnd, style=\"default\") md_def =  obnd[[\"md_def\"]]"},{"path":"/reference/fetch_officer_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts Officer Object From Onbrand Report Object â fetch_officer_object","title":"Extracts Officer Object From Onbrand Report Object â fetch_officer_object","text":"need modify onbrand report object directly officer functions can use function extract report object onbrand object.","code":""},{"path":"/reference/fetch_officer_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts Officer Object From Onbrand Report Object â fetch_officer_object","text":"","code":"fetch_officer_object(obnd, verbose = TRUE)"},{"path":"/reference/fetch_officer_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts Officer Object From Onbrand Report Object â fetch_officer_object","text":"obnd onbrand report object verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/fetch_officer_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts Officer Object From Onbrand Report Object â fetch_officer_object","text":"List following elements isgood: Boolean variable indicating success failure rpt: Officer object msgs: Vector messages","code":""},{"path":[]},{"path":"/reference/fetch_officer_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts Officer Object From Onbrand Report Object â fetch_officer_object","text":"","code":"obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  rpt = fetch_officer_object(obnd)$rpt"},{"path":"/reference/fetch_report_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch The Specified Report Formatting Information â fetch_report_format","title":"Fetch The Specified Report Formatting Information â fetch_report_format","text":"Returns list default font format report element","code":""},{"path":"/reference/fetch_report_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch The Specified Report Formatting Information â fetch_report_format","text":"","code":"fetch_report_format(obnd, format_name = \"default\", verbose = TRUE)"},{"path":"/reference/fetch_report_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch The Specified Report Formatting Information â fetch_report_format","text":"obnd onbrand report object format_name Name report format fetch; defined md_def verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned list. section given report type (\"default\")","code":""},{"path":"/reference/fetch_report_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch The Specified Report Formatting Information â fetch_report_format","text":"list containing following elements isgood: Boolean variable indicating success failure msgs: Vector messages format_details: List containing format details specified format_name","code":""},{"path":"/reference/fetch_report_format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch The Specified Report Formatting Information â fetch_report_format","text":"","code":"obnd = read_template(        template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),         mapping = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  fr = fetch_report_format(obnd)"},{"path":"/reference/fetch_rpttype.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines Type of Report Template â fetch_rpttype","title":"Determines Type of Report Template â fetch_rpttype","text":"Based file extension template","code":""},{"path":"/reference/fetch_rpttype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines Type of Report Template â fetch_rpttype","text":"","code":"fetch_rpttype(template = NULL, verbose = TRUE)"},{"path":"/reference/fetch_rpttype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines Type of Report Template â fetch_rpttype","text":"template Name PowerPoint Word file verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned list.","code":""},{"path":"/reference/fetch_rpttype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines Type of Report Template â fetch_rpttype","text":"List following elements rpttype: Either Word, PowerPoint Unknown rptext: Either docx, pptx, Unknown rptobj: Either rdocx, rpptx, Unknown isgood: Boolean variable indicating success failure msgs: Vector messages","code":""},{"path":"/reference/fetch_rpttype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines Type of Report Template â fetch_rpttype","text":"","code":"rpttype = fetch_rpttype(template=   file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"))"},{"path":"/reference/fph.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch PowerPoint Placeholder â fph","title":"Fetch PowerPoint Placeholder â fph","text":"Retrieves placeholder name PowerPoint specified layout element.","code":""},{"path":"/reference/fph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch PowerPoint Placeholder â fph","text":"","code":"fph(obnd, template = NULL, pn = NULL, verbose = TRUE)"},{"path":"/reference/fph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch PowerPoint Placeholder â fph","text":"obnd onbrand report object template Name slide template (name templates yaml mapping file) pn Placehodler name fetch verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned list.","code":""},{"path":"/reference/fph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch PowerPoint Placeholder â fph","text":"List following elements ph:      Placeholder label NULL failure type:    Placeholder content type PowerPoint NULL failure isgood: Boolean variable indicating success failure msgs: Vector messages","code":""},{"path":"/reference/fph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch PowerPoint Placeholder â fph","text":"","code":"# Creating an onbrand object: obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  # Pulling out the placeholder information: ph = fph(obnd, \"two_content_header_text\", \"content_left_header\")"},{"path":"/reference/fst.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Word Style â fst","title":"Fetch Word Style â fst","text":"Retrieves style name Word specified onbrand style name.","code":""},{"path":"/reference/fst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Word Style â fst","text":"","code":"fst(obnd, osn = NULL, verbose = TRUE)"},{"path":"/reference/fst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Word Style â fst","text":"obnd onbrand report object osn onbrand Word style name fetch verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned list.","code":""},{"path":"/reference/fst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Word Style â fst","text":"List following elements wsn:    Word style name corresponds specified onbrand style name (osn) dff:    Default font format style (corresponding md_def section yaml file style) isgood: Boolean variable indicating success failure msgs:   Vector messages","code":""},{"path":"/reference/fst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Word Style â fst","text":"","code":"# Creating an onbrand object: obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  # Pulling out the placeholder information: st = fst(obnd, \"Heading_3\")"},{"path":"/reference/ft_apply_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Render Markdown in flextable Object â ft_apply_md","title":"Render Markdown in flextable Object â ft_apply_md","text":"Takes flextable object renders markdown specified part.","code":""},{"path":"/reference/ft_apply_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render Markdown in flextable Object â ft_apply_md","text":"","code":"ft_apply_md(ft, obnd = NULL, part = \"body\")"},{"path":"/reference/ft_apply_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render Markdown in flextable Object â ft_apply_md","text":"ft Flextable object. obnd Optional onbrand object used format markdown. default NULL value use default formatting. part Part table can one \"\", \"body\" (default), \"header\", \"footer\"","code":""},{"path":"/reference/ft_apply_md.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render Markdown in flextable Object â ft_apply_md","text":"flextable markdown applied","code":""},{"path":"/reference/md_to_officer.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Markdown for Officer â md_to_officer","title":"Parse Markdown for Officer â md_to_officer","text":"Parses text Markdown format returns fpar as_paragraph command strings used officer","code":""},{"path":"/reference/md_to_officer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Markdown for Officer â md_to_officer","text":"","code":"md_to_officer(   str,   default_format = list(color = \"black\", font.size = 12, bold = FALSE, italic = FALSE,     underlined = FALSE, font.family = \"Cambria (Body)\", vertical.align = \"baseline\",     shading.color = \"transparent\") )"},{"path":"/reference/md_to_officer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Markdown for Officer â md_to_officer","text":"str string containing Markdown can contain following elements: paragraph:   two new lines creates paragraph bold:        can either \"**text bold**\" \"__text bold__\" italics:     can either \"*text italics*\" \"_text italics_\" subscript:   \"Normal~subscript~\" superscript: \"Normal^superscript^\" color:       \"<color:red>red text<\/color>\" shade:       \"<shade:#33ff33>shading<\/shade>\" font family: \"<ff:symbol>symbol<\/ff>\" reference:   \"<ref:key>\" \"key\" value  assigned adding table figure default_format list containing default format elements defined markdown default values.","code":"default_format = list(       color          = \"black\",       font.size      = 12,       bold           = FALSE,       italic         = FALSE,       underlined     = FALSE,       font.family    = \"Cambria (Body)\",       vertical.align = \"baseline\",       shading.color  = \"transparent\")"},{"path":"/reference/md_to_officer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Markdown for Officer â md_to_officer","text":"list parsed paragraph elements content added body,  paragraph can found numbered list element (e.g. pgraph_1, pgraph_2, etc) following elements: locs: Dataframe showing locations markdown elements current paragraph pele: individual parsed paragraph elements ftext_cmd: String containing ftext commands. fpar_cmd: String containing fpar commands can run using  eval return output fpar. example: as_paragraph_cmd: String containing as_paragraph_cmd can run using","code":"myfpar = eval(parse(text=pgparse$pgraph_1$fpar_cmd)) myas_para = eval(parse(text=pgparse$pgraph_1$as_paragraph_cmd))"},{"path":"/reference/md_to_officer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Markdown for Officer â md_to_officer","text":"","code":"res              = md_to_officer(\"Be **bold**!\") fpar_obj         = eval(parse(text=res$pgraph_1$fpar_cmd)) as_paragraph_obj = eval(parse(text=res$pgraph_1$as_paragraph_cmd))"},{"path":"/reference/md_to_oo.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Markdown into Officer as_paragraph Result â md_to_oo","title":"Parse Markdown into Officer as_paragraph Result â md_to_oo","text":"Used take small markdown chunks return as_paragraph results. function take markdown specified str, calls md_to_officer, evals as_paragraph field first paragraph returned, evals result returns object as_paragraph command.","code":""},{"path":"/reference/md_to_oo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Markdown into Officer as_paragraph Result â md_to_oo","text":"","code":"md_to_oo(strs, default_format = NULL)"},{"path":"/reference/md_to_oo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Markdown into Officer as_paragraph Result â md_to_oo","text":"strs vector strings containing Markdown can contain following elements: default_format list containing default format elements defined markdown default values (format md_to_officer, default NULL)","code":""},{"path":"/reference/md_to_oo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Markdown into Officer as_paragraph Result â md_to_oo","text":"list following elements isgood:    Boolean value indicating result function call msgs:      sequence strings containing description problems as_par_cmd:as_paragraph generated code md_to_officer oo:        as_paragraph officer object resulting running as_par_cmd code","code":""},{"path":"/reference/md_to_oo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Markdown into Officer as_paragraph Result â md_to_oo","text":"","code":"res = md_to_oo(\"Be **bold**\")"},{"path":"/reference/onbrand.html","id":null,"dir":"Reference","previous_headings":"","what":"onbrand: officer Abstraction Layer for Organizational Templates â onbrand","title":"onbrand: officer Abstraction Layer for Organizational Templates â onbrand","text":"onbrand package creates abstraction layer easily configurable yaml file allow creation reproducible reporting work flows across Word PowerPoint templates.","code":""},{"path":[]},{"path":"/reference/onbrand.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"onbrand: officer Abstraction Layer for Organizational Templates â onbrand","text":"Maintainer: John Harrold john.m.harrold@gmail.com (ORCID) Authors: Bryan Smith r.bryan.smith@gmail.com","code":""},{"path":"/reference/preview_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Report Previewing the Locations From Mapping File â preview_template","title":"Generate Report Previewing the Locations From Mapping File â preview_template","text":"Takes onbrand object loaded template populates template elements mapping file.","code":""},{"path":"/reference/preview_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Report Previewing the Locations From Mapping File â preview_template","text":"","code":"preview_template(obnd, verbose = TRUE)"},{"path":"/reference/preview_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Report Previewing the Locations From Mapping File â preview_template","text":"obnd onbrand report object verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/preview_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Report Previewing the Locations From Mapping File â preview_template","text":"onbrand object template previews added messages passed along","code":""},{"path":"/reference/preview_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Report Previewing the Locations From Mapping File â preview_template","text":"","code":"obnd = read_template(    template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),    mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\")) obnd = preview_template(obnd)  obnd = read_template(    template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),    mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\")) obnd = preview_template(obnd)"},{"path":"/reference/read_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Word or PowerPoint Templates â read_template","title":"Read Word or PowerPoint Templates â read_template","text":"Takes given template file/yaml mapping file combination, reads information, checks make sure mapping information correct returns onbrand object.","code":""},{"path":"/reference/read_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Word or PowerPoint Templates â read_template","text":"","code":"read_template(   template = file.path(system.file(package = \"onbrand\"), \"templates\", \"report.pptx\"),   mapping = file.path(system.file(package = \"onbrand\"), \"templates\", \"report.yaml\"),   verbose = TRUE )"},{"path":"/reference/read_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Word or PowerPoint Templates â read_template","text":"template Name PowerPoint Word file annotate (defaults included PowerPoint template) mapping Name yaml file configuration information verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/read_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Word or PowerPoint Templates â read_template","text":"onbrand object list following elements: isgood:       Boolean variable indicating current state object rpt:          Officer object containing initialized report rpttype:      Type report (either PowerPoint Word) key_table:    Empty (NULL) mapping table tracking cross referencing (Word ) placeholders: Empty list hold placeholder substitution text (Word ) meta:         Metadata read yaml file mapping:      Mapping yaml file msgs:         Vector messages indicating errors encountered","code":""},{"path":"/reference/read_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Word or PowerPoint Templates â read_template","text":"","code":"obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))"},{"path":"/reference/report_add_doc_content.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Content to Body of a Word Document Report â report_add_doc_content","title":"Add Content to Body of a Word Document Report â report_add_doc_content","text":"Appends content body Word document","code":""},{"path":"/reference/report_add_doc_content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Content to Body of a Word Document Report â report_add_doc_content","text":"","code":"report_add_doc_content(   obnd,   type = NULL,   content = NULL,   fig_start_at = NULL,   tab_start_at = NULL,   verbose = TRUE )"},{"path":"/reference/report_add_doc_content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Content to Body of a Word Document Report â report_add_doc_content","text":"obnd onbrand report object type Type content add content Content add fig_start_at Indicates want restart figure numbering specified value (e.g. 1) adding content value NULL (default) ignore option. tab_start_at Indicates want restart figure numbering specified value (e.g. 1) adding content value NULL (default) ignore option. verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/report_add_doc_content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Content to Body of a Word Document Report â report_add_doc_content","text":"onbrand object content added body isgood set FALSE messages msgs field. isgood value Boolean variable indicating current state object.","code":""},{"path":"/reference/report_add_doc_content.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Content to Body of a Word Document Report â report_add_doc_content","text":"content types listed different content outlined expected. Text can specified different formats: \"text\" indicates plain text, \"fpar\" formatted text defined fpar command officer package, \"ftext\" list formatted text defined ftext command, \"md\" text formatted markdown format (?md_to_officer markdown details). \"break\" page break, content (NULL) page break inserted \"ph\" adds placeholder text substitution \"name\" placeholder name (value body text surrounded three equal signs, e.g. \"===MYPH===\". document name just \"MYPH\") \"value\" value substituted placeholder (\"text\") \"location\" document location placeholder located (either \"header\", \"footer\", \"body\") \"toc\" generates table contents, content list  must contain __one__ following. \"level\" number indicating depth contents display (default: 3) \"style\" string containing onbrand style name use build TOC \"section\" formats current document section \"section_type\" type section apply, either \"columns\",  \"continuous\", \"landscape\", \"portrait\", \"columns\",   \"columns_landscape\" \"width\"        override default page width value inches (NULL) \"height\"       override default page height value inches (NULL) \"widths\"       column widths inches, number columns set number values (NULL) \"space\"        space inches columns (NULL) \"sep\"          Boolean value controlling line separating columns (FALSE) \"text\" content list containing paragraph text following elements \"text\" string containing text content either string output \"fpar\" formatted text. \"style\" string containing style use (default NULL use doc_def, Text style) \"format\" string containing format, either \"text\", \"fpar\", \"md\" (default NULL assumes \"text\" format) \"imagefile\" content list containing information describing image file following elements image string containing path image file caption caption image (NULL) caption_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) notes notes add image  (NULL) notes_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) key unique key cross referencing e.g. \"FIG_DATA\" (NULL) height height image (NULL) width width image (NULL) \"ggplot\" content list containing ggplot object, (eg. p = ggplot() + ....) following elements image ggplot object caption caption image (NULL) caption_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) notes notes add image  (NULL) notes_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) key unique key cross referencing e.g. \"FIG_DATA\" (NULL) height height image (NULL) width width image (NULL) \"table\" content list containing table content options following elements: table data frame containing tabular data \"style\" string containing style use (default NULL use doc_def, Table style) caption caption table (NULL) caption_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) notes notes add image  (NULL) notes_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) key unique key cross referencing e.g. \"TAB_DATA\" (NULL) header Boolean variable control displaying header (TRUE) first_row Boolean variable indicate first row contains header information (TRUE) \"flextable\" content list containing flextable content options following elements (defaults parenthesis): table data frame containing tabular data caption caption table (NULL) caption_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) notes notes add image  (NULL) notes_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) key unique key cross referencing e.g. \"TAB_DATA\" (NULL) header_top, header_middle, header_bottom (NULL) list names data frame names containing tabular data values header text show table header_format string containing format, either \"text\", \"md\" (default NULL assumes \"text\" format) merge_header (TRUE) Set true combine column headers information table_body_alignment, table_header_alignment (\"center\") Controls alignment table_autofit (TRUE) Automatically fit content, specify cell width height cwidth (0.75) cheight (0.25) table_theme (\"theme_vanilla\") Table theme \"flextable_object\" content list specifying user defined flextable object following elements: ft flextable object caption caption table (NULL) caption_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) notes notes add image  (NULL) notes_format string containing format, either \"text\", \"ftext\", \"md\" (default NULL assumes \"text\" format) key unique key cross referencing e.g. \"TAB_DATA\" (NULL)","code":""},{"path":"/reference/report_add_doc_content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Content to Body of a Word Document Report â report_add_doc_content","text":"","code":"# Read  Word template into an onbrand object obnd = read_template(  template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),  mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  # The examples below use the following packages library(ggplot2) library(flextable) library(officer)  # Adding text obnd = report_add_doc_content(obnd,   type     = \"text\",   content  = list(text=\"Text with no style specified will use the doc_def text format.\"))   # Text formatted with fpar fpartext = fpar( ftext(\"Formatted text can be created using the \", prop=NULL), ftext(\"fpar \", prop=fp_text(color=\"green\")), ftext(\"command from the officer package.\", prop=NULL))  obnd = report_add_doc_content(obnd,  type     = \"text\",  content  = list(text   = fpartext,                  format = \"fpar\",                  style  = \"Normal\"))  # Text formatted with markdown mdtext = \"Formatted text can be created using **<color:green>markdown<\/color>** formatting\" obnd = report_add_doc_content(obnd,  type     = \"text\",  content  = list(text   = mdtext,                  format = \"md\",                  style  = \"Normal\"))   # Adding figures p = ggplot() + annotate(\"text\", x=0, y=0, label = \"picture example\") imgfile = tempfile(pattern=\"image\", fileext=\".png\") ggsave(filename=imgfile, plot=p, height=5.15, width=9, units=\"in\")  # From an image file: obnd = report_add_doc_content(obnd, type     = \"imagefile\", content  = list(image   = imgfile,                caption = \"This is an example of an image from a file.\"))  # From a ggplot object obnd = report_add_doc_content(obnd, type     = \"imagefile\", content  = list(image   = imgfile,                caption = \"This is an example of an image from a file.\"))   #Adding tables tdf =    data.frame(Parameters = c(\"Length\", \"Width\", \"Height\"),                 Values     = 1:3,                 Units      = c(\"m\", \"m\", \"m\") )  # Word table tab_cont = list(table   = tdf,                caption = \"Word Table.\") obnd = report_add_doc_content(obnd,  type     = \"table\",  content  = tab_cont)  # onbrand flextable abstraction: tab_cont = list(table   = tdf,                caption = \"Word Table.\") obnd = report_add_doc_content(obnd, type     = \"table\", content  = tab_cont)  # flextable object tab_fto = flextable(tdf) obnd = report_add_doc_content(obnd,  type     = \"flextable_object\",  content  = list(ft=tab_fto,                  caption  = \"Flextable object created by the user.\"))  # Saving the report output save_report(obnd, tempfile(fileext = \".docx\")) #> $isgood #> [1] TRUE #>  #> $msgs #> NULL #>"},{"path":"/reference/report_add_slide.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Slide and Content â report_add_slide","title":"Add Slide and Content â report_add_slide","text":"Creates report slide populates content placeholders arbitrary locations.","code":""},{"path":"/reference/report_add_slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Slide and Content â report_add_slide","text":"","code":"report_add_slide(   obnd,   template = NULL,   elements = NULL,   user_location = NULL,   verbose = TRUE )"},{"path":"/reference/report_add_slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Slide and Content â report_add_slide","text":"obnd onbrand report object template Name slide template use (name templates yaml mapping file) elements Content type placeholder wish fill slide: list names set placeholders specified template. placeholder list content element type element (see Details ). user_location List arbitrary element names (see Details ) verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/report_add_slide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Slide and Content â report_add_slide","text":"onbrand report object either content added isgood set FALSE messages msgs field. isgood value Boolean variable indicating current state object.","code":""},{"path":"/reference/report_add_slide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Slide and Content â report_add_slide","text":"add content based placeholder names consider mapping information slide template title_slide two place holders title subtitle. shows populate title slide text: add content based user defined locations need supply list content, type, starting point stopping point. can use template wish, need populate user_location input. consists lists. name lists can arbitrary (text_example fig_example ). list content type, used elements . start stop represent x y coordinates. fraction width height slide measured upper left. start = c(0.5, 0) means box holding content start middle slide width top slide. obnd = report_add_slide(obnd,  template = \"two_content_header_text\",  user_location = list(     text_example  = list( content      = \"text\",                           type         = \"text\",                           start        = c(.01,.02),                           stop         = c(.3,.15)),     fig_example   = list( content      = ggplot2::ggplot(),                           type         = \"ggplot\",                           start        = c(.5,0),                           stop         = c(1,.5))  ) ) See function add_pptx_ph_content list allowed values type. Note mapping defines content_type text, use list type. Similarly, content_type defined list, use text type.","code":"rpptx:  master: Office Theme  templates:    title_slide:      title:        type:         ctrTitle        index:        1        ph_label:     Title 1        content_type: text      subtitle:        type:         subTitle        index:        1        ph_label:     Subtitle 2        content_type: text obnd = report_add_slide(obnd,  template = \"title_slide\",  elements = list(     title     = list( content      = \"Slide Title\",                       type         = \"text\"),     subtitle  = list( content      = \"Subtitle\",                       type         = \"text\")))"},{"path":[]},{"path":[]},{"path":"/reference/save_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Onbrand Report to a File â save_report","title":"Save Onbrand Report to a File â save_report","text":"Saves report onbrand object specified file.","code":""},{"path":"/reference/save_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Onbrand Report to a File â save_report","text":"","code":"save_report(obnd, output_file = NULL, verbose = TRUE)"},{"path":"/reference/save_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Onbrand Report to a File â save_report","text":"obnd onbrand report object output_file File name save report. verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/save_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Onbrand Report to a File â save_report","text":"List following elements isgood: Boolean variable indicating success failure msgs:   Vector messages","code":""},{"path":"/reference/save_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Onbrand Report to a File â save_report","text":"","code":"obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  save_report(obnd, tempfile(fileext = \".pptx\")) #> $isgood #> [1] TRUE #>  #> $msgs #> NULL #>   obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  save_report(obnd, tempfile(fileext = \".docx\")) #> $isgood #> [1] TRUE #>  #> $msgs #> NULL #>"},{"path":"/reference/set_officer_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Places Officer Object Into Onbrand Report Object â set_officer_object","title":"Places Officer Object Into Onbrand Report Object â set_officer_object","text":"modifying report object manually, can return onbrand object using function.","code":""},{"path":"/reference/set_officer_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Places Officer Object Into Onbrand Report Object â set_officer_object","text":"","code":"set_officer_object(obnd, rpt = NULL, verbose = TRUE)"},{"path":"/reference/set_officer_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Places Officer Object Into Onbrand Report Object â set_officer_object","text":"obnd onbrand report object rpt officer object verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned onbrand object.","code":""},{"path":"/reference/set_officer_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Places Officer Object Into Onbrand Report Object â set_officer_object","text":"onbrand object report replaced","code":""},{"path":[]},{"path":"/reference/set_officer_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Places Officer Object Into Onbrand Report Object â set_officer_object","text":"","code":"obnd = read_template(       template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),       mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\"))  # pulling out the report rpt = fetch_officer_object(obnd)$rpt  # Modifications would be made here with officer directly  # Replacing the report into the onbrand object obnd = set_officer_object(obnd, rpt)"},{"path":"/reference/span_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread Large Table Over Smaller Tables â span_table","title":"Spread Large Table Over Smaller Tables â span_table","text":"Takes large table spreads smaller tables paginate . preserve common row  information left separate columns according maximum specifications. final tables widths less equal max_col max_width, heights less equal max_row max_height.","code":""},{"path":"/reference/span_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread Large Table Over Smaller Tables â span_table","text":"","code":"span_table(   table_body = NULL,   row_common = NULL,   table_body_head = NULL,   row_common_head = NULL,   header_format = \"text\",   obnd = NULL,   max_row = 20,   max_col = 10,   max_height = 7,   max_width = 6.5,   table_alignment = \"center\",   inner_border = officer::fp_border(color = \"black\", width = 0.3),   outer_border = officer::fp_border(color = \"black\", width = 2),   set_header_inner_border_v = TRUE,   set_header_inner_border_h = TRUE,   set_header_outer_border = TRUE,   set_body_inner_border_v = TRUE,   set_body_inner_border_h = FALSE,   set_body_outer_border = TRUE,   notes_detect = NULL )"},{"path":"/reference/span_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread Large Table Over Smaller Tables â span_table","text":"table_body Data frame body large table. row_common Data frame common rows. table_body_head Data frame matrix headers table body. row_common_head Data frame matrix headers common rows. header_format Format header either \"text\" (default) \"md\" markdown. obnd Optional onbrand object used format markdown. default NULL value use default formatting. max_row Maximum number rows output tables (value NULL set max_row number rows table). max_col Maximum number columns output tables (value NULL set max_col number columns table). max_height Maximum height final table inches (value NULL use 100 inches). max_width Maximum width final table inches (value NULL use 100 inches). table_alignment Character string specifying alignment #'table (body headers). Can \"center\" (default), \"left\", \"right\", \"justify\" inner_border Border object inner border lines defined using officer::fp_border() outer_border Border object outer border lines defined using officer::fp_border() set_header_inner_border_v Boolean value enable disable inner vertical borders headers set_header_inner_border_h Boolean value enable disable inner horizontal borders headers set_header_outer_border Boolean value enable disable outer border headers set_body_inner_border_v Boolean value enable disable inner vertical borders body set_body_inner_border_h Boolean value enable disable inner horizontal borders body set_body_outer_border Boolean value enable disable outer border borders body notes_detect Vector strings detect output tables (example c(\"NC\", \"BLQ\")).","code":""},{"path":"/reference/span_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread Large Table Over Smaller Tables â span_table","text":"list following elements isgood:    Boolean indicating exit status function. one_body:  Full table headers. one_table: Full table headers. msgs:      Vector text messages describing errors found. tables:    Named list tables. list element output.   format build_span().","code":""},{"path":"/reference/span_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spread Large Table Over Smaller Tables â span_table","text":"way data frames relate mapped . dimensions different data frames identified (nrow x ncol) ``` #|-------------------------------------| --- #|                 |                   |  ^ #|                 |                   |  | #| row_common_head |  table_body_head  |  | m #|      m x n      |       m x c       |  | #|                 |                   |  v #|-------------------------------------| --- #|                 |                   |  ^ #|                 |                   |  | #|    row_common   |    table_body     |  | r #|      r x n      |      r x c        |  | #|                 |                   |  | #|                 |                   |  v #|-------------------------------------| --- # #|<--------------->|<----------------->| #        n                   c ```","code":""},{"path":[]},{"path":"/reference/span_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread Large Table Over Smaller Tables â span_table","text":"","code":"if(interactive()){ trow = c(1:51) tcol = c(1:63) cht  = c(rep(\"A\", 20),          rep(\"B\", 20),          rep(\"C\", 11))   table_body = NULL for(cn in tcol){   if(is.null(table_body)){     tmp_cmd =  paste0(\"table_body = data.frame(C_\",                       cn,\"= paste0(trow, ',', cn))\")   } else {     tmp_cmd =  paste0(\"table_body = cbind(table_body, data.frame(C_\",                       cn,\"= paste0(trow, ',', cn)))\")   }   eval(parse(text=tmp_cmd)) }   table_body[1,]    = \"BQL\" table_body[5,8]   = \"NC\" table_body[20,]   = \"BQL\" table_body[25,2]  = \"NC\"  row_common = data.frame(     ID = trow,     CH = cht)   row_common_head = data.frame(     ID  = c(\"ID\",     \"ID\", \"ID\"),     CH  = c(\"Cohort\", \"Cohort\", \"Cohort\"))    table_body_head = NULL  cidx = 1 for(cn in names(table_body)){    units = \"units\"   range = \"range\"    if(cidx < 4){     range = \"R A\"   } else if(cidx < 12 ){     range = \"R B\"   } else if(cidx < 18 ){     range = \"R C\"   } else if(cidx < 28 ){     range = \"R D\"   } else if(cidx < 35 ){     range = \"R E\"   } else if(cidx < 48 ){     range = \"R F\"   } else if(cidx < 55 ){     range = \"R G\"   } else if(cidx < 60 ){     range = \"R H\"   } else {     range = \"R I\"   }    if(cidx < 4){     units = \"U A\"   } else if(cidx < 8  ){     units = \"U B\"   } else if(cidx < 14 ){     units = \"U Q\"   } else if(cidx < 18 ){     units = \"U C\"   } else if(cidx < 28 ){     units = \"U D\"   } else if(cidx < 35 ){     units = \"U E\"   } else if(cidx < 48 ){     units = \"U F\"   } else if(cidx < 55 ){     units = \"U G\"   } else if(cidx < 60 ){     units = \"U H\"   } else {     units = \"U I\"   }    if(is.null(table_body_head)){     tmp_cmd =  paste0(\"table_body_head = data.frame(\",                       cn,'= c(\"', cn, '\", units, range))')   } else {     tmp_cmd =  paste0(\"table_body_head = cbind(table_body_head, data.frame(\",                       cn,'= c(\"', cn, '\", units, range)))')   }    eval(parse(text=tmp_cmd))   cidx = cidx + 1 }  res = span_table(table_body      = table_body,            row_common      = row_common,            table_body_head = table_body_head,            row_common_head = row_common_head,            max_row         = 20,            max_col         = 10,            notes_detect    = c(\"BQL\", \"NC\"))  }"},{"path":"/reference/template_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Template Details for `onbrand` Object â template_details","title":"Show Template Details for `onbrand` Object â template_details","text":"Takes onbrand object loaded template displays relevant details template.","code":""},{"path":"/reference/template_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Template Details for `onbrand` Object â template_details","text":"","code":"template_details(obnd, verbose = TRUE)"},{"path":"/reference/template_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Template Details for `onbrand` Object â template_details","text":"obnd onbrand report object verbose Boolean variable set TRUE (default) messages displayed terminal; Messages included returned results object.","code":""},{"path":"/reference/template_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Template Details for `onbrand` Object â template_details","text":"list following elements: rpttype:      Type report (either PowerPoint Word) msgs:         Vector messages details errors encountered txt:          Vector template details text format df:           Vector template details dataframe ft:           Vector template details flextable format isgood:       Boolean variable indicating current state object","code":""},{"path":"/reference/template_details.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show Template Details for `onbrand` Object â template_details","text":"Provides relevant details onbrand object.  PowerPoint  contains template names elements present template.  Word contain defined text table styles. information can  displayed console, returned text formatted use RMarkdown  documentation.","code":""},{"path":"/reference/template_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Template Details for `onbrand` Object â template_details","text":"","code":"obnd = read_template(    template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),    mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\")) details = template_details(obnd) #> Mapping:     /private/var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T/RtmprEolNe/temp_libpath1117956fcd423/onbrand/templates/report.yaml #> Report Type: PowerPoint #> title_slide (master/template) #>   > title (text) #>   > sub_title (text) #> section_slide (master/template) #>   > title (text) #>   > sub_title (text) #> title_only (master/template) #>   > title (text) #> content_text (master/template) #>   > title (text) #>   > sub_title (text) #>   > content_body (text) #> content_list (master/template) #>   > title (text) #>   > sub_title (text) #>   > content_body (list) #> two_content_header_list (master/template) #>   > title (text) #>   > sub_title (text) #>   > content_left_header (text) #>   > content_left (list) #>   > content_right_header (text) #>   > content_right (list) #> two_content_header_text (master/template) #>   > title (text) #>   > sub_title (text) #>   > content_left_header (text) #>   > content_left (text) #>   > content_right_header (text) #>   > content_right (text) #> two_content_list (master/template) #>   > title (text) #>   > sub_title (text) #>   > content_left (list) #>   > content_right (list) #> two_content_text (master/template) #>   > title (text) #>   > sub_title (text) #>   > content_left (text) #>   > content_right (text)  obnd = read_template(    template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),    mapping  = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.yaml\")) details = template_details(obnd) #> Mapping:     /private/var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T/RtmprEolNe/temp_libpath1117956fcd423/onbrand/templates/report.yaml #> Report Type: Word #>   onbrand style (word style, style type) #>   -------------------------------------- #>   Code (Code, paragraph) #>   Figure_Caption (graphic title, paragraph) #>   Heading_1 (heading 1, paragraph) #>   Heading_2 (heading 2, paragraph) #>   Heading_3 (heading 3, paragraph) #>   Normal (Normal, paragraph) #>   Notes (Notes, paragraph) #>   TOC (toc 1, paragraph) #>   Table_Caption (table title, paragraph) #>   Table (Table Grid, table)"},{"path":"/reference/view_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Annotated Layout for Report Templates â view_layout","title":"Generate Annotated Layout for Report Templates â view_layout","text":"Produces report layout element labeled.","code":""},{"path":"/reference/view_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Annotated Layout for Report Templates â view_layout","text":"","code":"view_layout(   template = file.path(system.file(package = \"onbrand\"), \"templates\", \"report.pptx\"),   output_file = NULL,   verbose = TRUE )"},{"path":"/reference/view_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Annotated Layout for Report Templates â view_layout","text":"template Name PowerPoint Word file annotate (defaults included PoerPoint template) output_file name file place annotated layout information, set NULL generate file named layout appropriate extension verbose Boolean variable set TRUE (default) messages ","code":""},{"path":"/reference/view_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Annotated Layout for Report Templates â view_layout","text":"List following elements isgood: Boolean variable indicating success failure rpt: Officer annotated layout msgs: Vector messages","code":""},{"path":"/reference/view_layout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Annotated Layout for Report Templates â view_layout","text":"Generates Annotated report based template provided.   Elements slide masters identified placeholder labels. PowerPoint  masters created labels can difficult predict. Word documents  identified style names. function create layout file identifying  elements slide master PowerPoint template  paragraph table style Word template.","code":""},{"path":"/reference/view_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Annotated Layout for Report Templates â view_layout","text":"","code":"lpptx = view_layout(      template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.pptx\"),      output_file   = file.path(tempdir(), \"layout.pptx\")) #> -------------------------------- #> Generating annotated layout for a report template #> Template:         /private/var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T/RtmprEolNe/temp_libpath1117956fcd423/onbrand/templates/report.pptx #> Annotated layout: /var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T//RtmpLe34CO/layout.pptx #> --------------------------------  ldocx = view_layout(      template = file.path(system.file(package=\"onbrand\"), \"templates\", \"report.docx\"),      output_file   = file.path(tempdir(), \"layout.docx\")) #> -------------------------------- #> Generating annotated layout for a report template #> Template:         /private/var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T/RtmprEolNe/temp_libpath1117956fcd423/onbrand/templates/report.docx #> Annotated layout: /var/folders/l9/6pm7xq5j1hn6l00zrs22j6mc0000gn/T//RtmpLe34CO/layout.docx #> --------------------------------"},{"path":"/news/index.html","id":"onbrand-104","dir":"Changelog","previous_headings":"","what":"onbrand 1.0.4","title":"onbrand 1.0.4","text":"Added ability place content arbitrary locations slides PowerPoint.","code":""},{"path":"/news/index.html","id":"onbrand-103","dir":"Changelog","previous_headings":"","what":"onbrand 1.0.3","title":"onbrand 1.0.3","text":"CRAN release: 2023-07-16","code":""},{"path":"/news/index.html","id":"table-formatting-1-0-3","dir":"Changelog","previous_headings":"","what":"Table formatting","title":"onbrand 1.0.3","text":"Added functions take large table create smaller tables span across multiple pages reports (span_table() build_span()) Render markdown specified part flext table (ft_apply_md())","code":""},{"path":"/news/index.html","id":"onbrand-102","dir":"Changelog","previous_headings":"","what":"onbrand 1.0.2","title":"onbrand 1.0.2","text":"CRAN release: 2021-12-20","code":""},{"path":"/news/index.html","id":"changes-to-yaml-file-format-1-0-2","dir":"Changelog","previous_headings":"","what":"Changes to yaml file format","title":"onbrand 1.0.2","text":"addition notes option tables figures Word reporting requires Notes document default added report.yaml files: Added formatting options separator (regional configuration variable seems different Europe US), several table figure formatting options: order, sequence IDs, numbering done (allows Figure 1 Figure 3-1 (section 3), etc.) Adding post_processing option rdocx rpptx sections. can omitted set NULL effect. R code evaluated just saving (running save_report()) can modify object rpt (officer report object obnd object).","code":"doc_def:                        Notes: Notes formatting:   separator:                 \",\"   Table_Order:     - table     - notes     - caption   Figure_Order:     - figure     - notes     - caption   Figure_Seq_Id:             \"Figure\"   Figure_Number: |-     list(officer::run_autonum(pre_label  = \"\",                                seq_id     = Caption_Seq_Id,                                post_label = \"\",                                start_at   = Caption_Start_At))   Table_Seq_Id:              \"Table\"   Table_Number: |-     list(officer::run_autonum(pre_label  = \"\",                                seq_id     = Caption_Seq_Id,                                post_label = \"\",                                start_at   = Caption_Start_At)) rdocx:   post_processing: NULL rpptx:   post_processing: NULL"},{"path":"/news/index.html","id":"minor-improvements-1-0-2","dir":"Changelog","previous_headings":"","what":"Minor Improvements","title":"onbrand 1.0.2","text":"Added fig_start_at tab_start_at arguments report_add_doc_content() support chapter specific numbering (e.g.Â Figure 3-1, Figure 3-2, Figure 4-1, etc). Added notes option tables figures Word reporting. Created ftext formatting captions notes added figures tables. Support multipage figures tables (e.g.Â pagenated figures). specifying key figure (table) first instance figure subsequent instances references first. Support crossreferencing figures tables markdown.","code":""},{"path":"/news/index.html","id":"onbrand-101","dir":"Changelog","previous_headings":"","what":"onbrand 1.0.1","title":"onbrand 1.0.1","text":"CRAN release: 2021-09-02","code":""},{"path":"/news/index.html","id":"minor-improvements-1-0-1","dir":"Changelog","previous_headings":"","what":"Minor Improvements","title":"onbrand 1.0.1","text":"updated diagnostic messages include package name added NEWS.md Added function template_details Provide onbrand names template elements Created tests Updated vignettes","code":""},{"path":"/news/index.html","id":"onbrand-100","dir":"Changelog","previous_headings":"","what":"onbrand 1.0.0","title":"onbrand 1.0.0","text":"CRAN release: 2021-07-12 Submitted CRAN","code":""}]
